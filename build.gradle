buildscript {
    repositories {
        maven { url "https://repo.spring.io/plugins-release" }
    }
    dependencies {
        classpath("org.springframework.build.gradle:propdeps-plugin:0.0.7")
    }
}

configure(allprojects) { project ->
    group 'com.uimirror.framework'
    version '1.0.0-SNAPSHOT'
    version = qualifyVersionIfNecessary(version)
    ext.appName                     = name
    ext.junitVersion                = "4.12"
    ext.hamcrestVersion             = "1.3"
    ext.junitVersion                = "4.12"
    ext.equalsverifierVersion       = "2.1.3"
    ext.mockitoVersion              = "2.0.86-beta"
    ext.assertjVersion              = "1.0.0m1"
    ext.springVersion               = "4.3.5.RELEASE"

    ext.hibernateValidatorVersion   = "5.3.0.Alpha1"
    ext.servletVersion              = "4.0.0-b01"
    ext.commonLoang3Version         = "3.4"
    ext.sl4jApiVersion              = "1.7.21"
    ext.jacksonVersion              = "2.8.1"
    ext.commonsCodecVersion         = "1.10"

    apply plugin: "propdeps"
    apply plugin: "java"
    apply plugin: "idea"

    configurations {
        sniffer
        javaApiSignature
    }

    compileJava.options*.compilerArgs = [
            "-Xlint:serial", "-Xlint:varargs", "-Xlint:cast", "-Xlint:classfile",
            "-Xlint:dep-ann", "-Xlint:divzero", "-Xlint:empty", "-Xlint:finally",
            "-Xlint:overrides", "-Xlint:path", "-Xlint:processing", "-Xlint:static",
            "-Xlint:try", "-Xlint:fallthrough", "-Xlint:rawtypes", "-Xlint:deprecation",
            "-Xlint:unchecked", "-Xlint:-options"
    ]

    compileTestJava.options*.compilerArgs = [
            "-Xlint:serial", "-Xlint:-varargs", "-Xlint:cast", "-Xlint:classfile",
            "-Xlint:dep-ann", "-Xlint:divzero", "-Xlint:empty", "-Xlint:finally",
            "-Xlint:overrides", "-Xlint:path", "-Xlint:processing", "-Xlint:static",
            "-Xlint:try", "-Xlint:-fallthrough", "-Xlint:-rawtypes", "-Xlint:-deprecation",
            "-Xlint:-unchecked", "-Xlint:-options"]

    compileJava {
        sourceCompatibility = 1.8
        targetCompatibility = 1.8
    }

    compileTestJava {
        sourceCompatibility = 1.8
        targetCompatibility = 1.8
        options.warnings = false
        options.deprecation = false
        options.compilerArgs += ["-Xdoclint:none", "-Xlint:none", "-nowarn", "-parameters"]
    }

    test {
        systemProperty("java.awt.headless", "true")
        systemProperty("testGroups", project.properties.get("testGroups"))
        scanForTestClasses = false
        include(["**/*Tests.class", "**/*Test.class"])
        // Since we set scanForTestClasses to false, we need to filter out inner
        // classes with the "$" pattern; otherwise, using -Dtest.single=MyTests to
        // run MyTests by itself will fail if MyTests contains any inner classes.
        exclude(["**/Abstract*.class", '**/*$*'])
    }

    repositories {
        mavenCentral()
    }

    dependencies {
        testCompile("junit:junit:${junitVersion}") {
            exclude group:'org.hamcrest', module:'hamcrest-core'
        }
        testCompile("org.mockito:mockito-core:${mockitoVersion}") {
            exclude group:'org.hamcrest', module:'hamcrest-core'
        }
        testCompile("org.hamcrest:hamcrest-all:${hamcrestVersion}")
        testCompile ("nl.jqno.equalsverifier:equalsverifier:${equalsverifierVersion}")
        testCompile ("org.assertj:assertj-core-java8:${assertjVersion}")

        compile ("org.apache.commons:commons-lang3:${commonLoang3Version}")
        compile ("org.slf4j:slf4j-api:${sl4jApiVersion}")


    }

}

/*
 * Support publication of artifacts versioned by topic branch.
 * CI builds supply `-P BRANCH_NAME=<TOPIC>` to gradle at build time.
 * If <TOPIC> starts with 'SPR-', change version
 *     from BUILD-SNAPSHOT => <TOPIC>-SNAPSHOT
 *     e.g. 3.2.1.BUILD-SNAPSHOT => 3.2.1.SPR-1234-SNAPSHOT
 */
def qualifyVersionIfNecessary(version) {
    if (rootProject.hasProperty("BRANCH_NAME")) {
        def qualifier = rootProject.getProperty("BRANCH_NAME")
        if (qualifier.startsWith("SPR-")) {
            return version.replace('BUILD', qualifier)
        }
    }
    return version
}